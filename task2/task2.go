package main

import (
	"fmt"
	"sync"
	"time"
)

/*
Написать программу, которая конкурентно рассчитает значение квадратов чисел
взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.
*/

// Task2_1 - синзронизация с помощью вейтгруппы.
func Task2_1() {
	mas := [...]int{2, 4, 6, 8, 10}

	// объявляем вейтгруппу
	wg := sync.WaitGroup{}

	for _, j := range mas {
		// увеличиваем счетчик для ожидания завершения каждой горутины
		wg.Add(1)
		// создаем горутинку с вычеслением квадрата числа,
		// передаем число как копию в анонимную функцию, чтобы избежать состояния гонки
		go func(j int) {
			// уменьшаем счетчик WaitGroup при завершении горутины
			defer wg.Done()
			// вывод квадрата числа в стандартный вывод
			fmt.Println(j * j)
		}(j)
	}
	// ждем завершения всех горутин, чтобы преждевременно не выйти из функции
	wg.Wait()
}

// Task2_2 - синзронизация с помощью канала.
func Task2_2() {
	mas := []int{2, 4, 6, 8, 10}
	ch := make(chan int)

	for _, j := range mas {
		// создаем горутинку с вычеслением квадрата числа,
		// передаем число как копию в анонимную функцию, чтобы избежать состояния гонки
		go func(j int) {
			// записываем в канал квадрат числа
			ch <- j * j
		}(j)
	}

	// читаем из канала столько раз сколько у нас есть чисел в массиве
	for range mas {
		// вывод приходящих квадратов
		fmt.Println(<-ch)
	}
	// закрываем канал
	close(ch)
}

// Task2_3 - конвейер для вычислений квадратов чисел
func Task2_3() {
	upCh := make(chan int)
	dwCh := make(chan int)

	// первая горутина отправляет числа которые нужно возвести в квадрат в канал upCh
	go func() {
		mas := [...]int{2, 4, 6, 8, 10}

		for _, j := range mas {
			upCh <- j
		}
		// когда все числа отправлены закрываем канал
		close(upCh)
	}()

	// вторая горутина получает числа из канала upCh, возведит их в квадрат
	// и отправляет результаты в канал dwCh
	go func() {
		for i := range upCh {
			dwCh <- i * i
		}
		// когда квадраты всех чисел посчитаны закрываем канал 
		close(dwCh)
	}()

	// читаем канал dwCh пока в не закроется и выводим полученные числа
	for i := range dwCh {
		fmt.Println(i)
	}
}

func main() {
	Task2_1()
	fmt.Println("=========================================")
	time.Sleep(time.Second)
	Task2_2()
	fmt.Println("=========================================")
	time.Sleep(time.Second)
	Task2_3()
}
